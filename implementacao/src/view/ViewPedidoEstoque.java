/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControllerCliente;
import controller.ControllerEstoque;
import controller.ControllerFilial;
import controller.ControllerFormaPagamento;
import controller.ControllerItemPedido;
import controller.ControllerPedidoEstoque;
import controller.ControllerProduto;
import controller.ControllerUsuario;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelCliente;
import model.ModelEstoque;
import model.ModelFilial;
import model.ModelFormaPagamento;
import model.ModelItemPedido;
import model.ModelPedidoEstoque;
import model.ModelProduto;
import model.ModelUsuario;

/**
 *
 * @author bruno
 */
public class ViewPedidoEstoque extends javax.swing.JFrame {

    int countIdPedidoEstoque = 0;

    ModelProduto modelProduto = new ModelProduto();
    ModelItemPedido modelItemPedido = new ModelItemPedido();
    ModelEstoque modelEstoque = new ModelEstoque();
    ModelPedidoEstoque modelPedidoEstoque = new ModelPedidoEstoque();
    ModelFilial modelFilial = new ModelFilial();
    ModelUsuario modelUsuario = new ModelUsuario();
    ModelCliente modelCliente = new ModelCliente();

    ControllerEstoque controllerEstoque = new ControllerEstoque();
    ControllerFilial controllerFilial = new ControllerFilial();
    ControllerItemPedido controllerItemPedido = new ControllerItemPedido();
    ControllerProduto controllerProduto = new ControllerProduto();
    ControllerFormaPagamento controllerFormaPagamento = new ControllerFormaPagamento();
    ControllerPedidoEstoque controllerPedidoEstoque = new ControllerPedidoEstoque();
    ControllerCliente controllerCliente = new ControllerCliente();
    ControllerUsuario controllerUsuario = new ControllerUsuario();

    ArrayList<ModelItemPedido> listaModelItemPedido = new ArrayList<>();
    ArrayList<ModelProduto> listaModelProduto = new ArrayList<>();
    ArrayList<ModelEstoque> listaModelEstoque = new ArrayList<>();
    ArrayList<ModelFormaPagamento> listaModelFormaPagamento = new ArrayList<>();
    ArrayList<ModelCliente> listaModelCliente = new ArrayList<>();
    ArrayList<ModelUsuario> listaModelUsuario = new ArrayList<>();
    ArrayList<ModelFilial> listaModelFilial = new ArrayList<>();

    String tipoPedido;

    /**
     * Creates new form ViewPedidoEstoque
     */
    public ViewPedidoEstoque() {
        initComponents();
        setLocationRelativeTo(null);
        preencherComboBoxFilial();
        preencherComboBoxUsuario();
        preencherComboBoxCliente();
        preencheTabelaProdutosSaida();
        preencheTabelaProdutosEtrada();
        preencherComboBoxFormaPagamento();
        preencherComboBoxFormaPagamentoEntrada();
        jtpItemPedido.setEnabledAt(1, false);
        jtpItemPedido.setEnabledAt(2, false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpItemPedido = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        tfObservacao = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfCodFilial = new javax.swing.JTextField();
        cbFilial = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfCodUsuario = new javax.swing.JTextField();
        cbUsuario = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfCodCliente = new javax.swing.JTextField();
        cbCliente = new javax.swing.JComboBox<>();
        jbPedidoSaida = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabelaItemPedido = new javax.swing.JTable();
        tfCodProduto = new javax.swing.JTextField();
        jbBuscaPorId = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        tfQuantidade = new javax.swing.JTextField();
        tfCodBarrasProd = new javax.swing.JTextField();
        jbRemover = new javax.swing.JButton();
        jbBuscaPorCodBarra = new javax.swing.JButton();
        jbFinalizarVenda = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jbCancelar = new javax.swing.JButton();
        tfDescricao = new javax.swing.JTextField();
        jbAdicionar = new javax.swing.JButton();
        jbBuscaPorDescricao = new javax.swing.JButton();
        cbFormaPagamento = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaProduto = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jbBuscaPorDescricao1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        cbFormaPagamentoEntrada = new javax.swing.JComboBox<>();
        tfQuantidadeEntrada = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TabelaProdutoEntrada = new javax.swing.JTable();
        tfCodBarrasProdEntrada = new javax.swing.JTextField();
        jbRemoverEntrada = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jbBuscaPorCodBarraEntrada = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jbFinalizarCompra = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        TabelaItemPedidoEntrada = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        jbCancelarEntrada = new javax.swing.JButton();
        tfCodProdutoEntrada = new javax.swing.JTextField();
        tfDescricaoEntrada = new javax.swing.JTextField();
        jbBuscaPorIdEntrada = new javax.swing.JButton();
        jbAdicionarEntrada = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TabelaSaida = new javax.swing.JTable();
        jLabel18 = new javax.swing.JLabel();
        tfTotal = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TabelaEntrada = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        tfTotalEntrada = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pedido");

        jtpItemPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtpItemPedidoMouseClicked(evt);
            }
        });

        jPanel1.setEnabled(false);
        jPanel1.setFocusable(false);

        jLabel9.setText("Observação de entrega:");

        jLabel5.setText("Id Filial");

        jLabel1.setText("Filial:");

        tfCodFilial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodFilialActionPerformed(evt);
            }
        });

        cbFilial.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbFilial.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbFilialPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jLabel6.setText("Id Usuário");

        jLabel2.setText("Usuario:");

        cbUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbUsuario.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbUsuarioPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cbUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUsuarioActionPerformed(evt);
            }
        });

        jLabel7.setText("Id Cliente");

        jLabel3.setText("Cliente:");

        tfCodCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfCodClienteActionPerformed(evt);
            }
        });

        cbCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCliente.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                cbClientePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        cbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClienteActionPerformed(evt);
            }
        });

        jbPedidoSaida.setText("Pedido Saída");
        jbPedidoSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPedidoSaidaActionPerformed(evt);
            }
        });

        jButton1.setText("Pedido Entrada");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfCodUsuario))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(tfCodCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfCodFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(jButton1)
                .addGap(56, 56, 56)
                .addComponent(jbPedidoSaida)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCodUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCodCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCodFilial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbFilial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfObservacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbPedidoSaida)
                    .addComponent(jButton1))
                .addContainerGap(357, Short.MAX_VALUE))
        );

        jtpItemPedido.addTab("Criar Pedido", jPanel1);

        jPanel2.setEnabled(false);
        jPanel2.setFocusable(false);

        jLabel4.setText("Id:");

        TabelaItemPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Status", "Qtd", "Valor unitário", "Valor total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TabelaItemPedido);

        jbBuscaPorId.setText("jButton1");
        jbBuscaPorId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorIdActionPerformed(evt);
            }
        });

        jLabel8.setText("Qtd:");

        jLabel10.setText("Código de barras:");

        jbRemover.setText("Remover");
        jbRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverActionPerformed(evt);
            }
        });

        jbBuscaPorCodBarra.setText("jButton2");
        jbBuscaPorCodBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorCodBarraActionPerformed(evt);
            }
        });

        jbFinalizarVenda.setText("Finalizar venda");
        jbFinalizarVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarVendaActionPerformed(evt);
            }
        });

        jLabel11.setText("Descrição:");

        jbCancelar.setText("Cancelar");
        jbCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarActionPerformed(evt);
            }
        });

        jbAdicionar.setText("Adicionar");
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jbBuscaPorDescricao.setText("jButton3");
        jbBuscaPorDescricao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorDescricaoActionPerformed(evt);
            }
        });

        cbFormaPagamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbFormaPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFormaPagamentoActionPerformed(evt);
            }
        });

        TabelaProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Cod Barras", "Descrição", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabelaProduto);

        jLabel12.setText("Forma de pagamento:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tfDescricao)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(tfCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jbBuscaPorId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfCodBarrasProd, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbBuscaPorDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jbBuscaPorCodBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jbCancelar)
                        .addGap(18, 18, 18)
                        .addComponent(jbRemover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbFinalizarVenda))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAdicionar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCodProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorId)
                            .addComponent(tfCodBarrasProd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorCodBarra))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorDescricao))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(jbAdicionar)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFormaPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbRemover)
                    .addComponent(jbCancelar)
                    .addComponent(jbFinalizarVenda))
                .addContainerGap())
        );

        jtpItemPedido.addTab("Itens Saída", jPanel2);

        jbBuscaPorDescricao1.setText("jButton3");
        jbBuscaPorDescricao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorDescricao1ActionPerformed(evt);
            }
        });

        jLabel13.setText("Código de barras:");

        cbFormaPagamentoEntrada.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        TabelaProdutoEntrada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Cod Barras", "Descrição", "Valor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(TabelaProdutoEntrada);

        jbRemoverEntrada.setText("Remover");
        jbRemoverEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverEntradaActionPerformed(evt);
            }
        });

        jLabel14.setText("Forma de pagamento:");

        jbBuscaPorCodBarraEntrada.setText("jButton2");
        jbBuscaPorCodBarraEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorCodBarraEntradaActionPerformed(evt);
            }
        });

        jLabel15.setText("Id:");

        jbFinalizarCompra.setText("Finalizar compra");
        jbFinalizarCompra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinalizarCompraActionPerformed(evt);
            }
        });

        TabelaItemPedidoEntrada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Status", "Qtd", "Valor unitário", "Valor total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TabelaItemPedidoEntrada);

        jLabel16.setText("Descrição:");

        jbCancelarEntrada.setText("Cancelar");
        jbCancelarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelarEntradaActionPerformed(evt);
            }
        });

        jbBuscaPorIdEntrada.setText("jButton1");
        jbBuscaPorIdEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscaPorIdEntradaActionPerformed(evt);
            }
        });

        jbAdicionarEntrada.setText("Adicionar");
        jbAdicionarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarEntradaActionPerformed(evt);
            }
        });

        jLabel17.setText("Qtd:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 658, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tfDescricaoEntrada)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel15)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(tfCodProdutoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jbBuscaPorIdEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfCodBarrasProdEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel13))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbBuscaPorDescricao1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(jbBuscaPorCodBarraEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane5)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jbCancelarEntrada)
                        .addGap(18, 18, 18)
                        .addComponent(jbRemoverEntrada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbFinalizarCompra))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfQuantidadeEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbAdicionarEntrada))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbFormaPagamentoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCodProdutoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorIdEntrada)
                            .addComponent(tfCodBarrasProdEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorCodBarraEntrada))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDescricaoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbBuscaPorDescricao1))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfQuantidadeEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17)
                        .addComponent(jbAdicionarEntrada)))
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFormaPagamentoEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbRemoverEntrada)
                    .addComponent(jbCancelarEntrada)
                    .addComponent(jbFinalizarCompra))
                .addContainerGap())
        );

        jtpItemPedido.addTab("Itens Entrada", jPanel3);

        TabelaSaida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Valor unitário", "Forma de pagamento", "Valor total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TabelaSaida);

        jLabel18.setText("Total");

        tfTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTotalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tfTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        jtpItemPedido.addTab("Saídas", jPanel4);

        TabelaEntrada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Valor unitário", "Forma de pagamento", "Valor total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(TabelaEntrada);

        jLabel19.setText("Total");

        tfTotalEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTotalEntradaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTotalEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(tfTotalEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(176, Short.MAX_VALUE))
        );

        jtpItemPedido.addTab("Entradas", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpItemPedido)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtpItemPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscaPorIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorIdActionPerformed
        // TODO add your handling code here:
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProduto.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProduto.setRowSorter(classificador);

        //String txtId = tfId.getText();
        //String txtCodBarras = tfCodBarras.getText();
        String txt = tfCodProduto.getText();

        classificador.setRowFilter(RowFilter.regexFilter(txt, 0));
    }//GEN-LAST:event_jbBuscaPorIdActionPerformed

    private void jbRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverActionPerformed
        // TODO add your handling code here:
        limparCamposSaida();
        modelItemPedido.setStatus("Cancelado");
    }//GEN-LAST:event_jbRemoverActionPerformed

    private void jbBuscaPorCodBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorCodBarraActionPerformed
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProduto.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProduto.setRowSorter(classificador);

        //String txtId = tfId.getText();
        //String txtCodBarras = tfCodBarras.getText();
        String txt = tfCodBarrasProd.getText();

        classificador.setRowFilter(RowFilter.regexFilter(txt, 1));
    }//GEN-LAST:event_jbBuscaPorCodBarraActionPerformed

    private void jbFinalizarVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarVendaActionPerformed
        // TODO add your handling code here:
        salvarPedidoEstoque();
        int idProduto = 0;
        int idEstoque = 0;
        int idFilial = 0;

        listaModelItemPedido = new ArrayList<>();

        int tamTabela = TabelaItemPedido.getRowCount();
        for (int i = 0; i < tamTabela; i++) {

            idProduto = (int) TabelaItemPedido.getValueAt(i, 0);
            idFilial = Integer.parseInt(tfCodFilial.getText());
            modelItemPedido = new ModelItemPedido();
            modelEstoque = new ModelEstoque();
            modelItemPedido.setIdProduto(idProduto);
            modelItemPedido.setStatus("Processado");
            modelItemPedido.setQuantidade((int) TabelaItemPedido.getValueAt(i, 2));
            modelItemPedido.setValorUnitario((double) TabelaItemPedido.getValueAt(i, 3));
            modelItemPedido.setValorTotal((double) TabelaItemPedido.getValueAt(i, 4));
            modelItemPedido.setIdFormaPagamento(controllerFormaPagamento.getFormaPagamentoPorTipoController((cbFormaPagamento.getSelectedItem().toString())).getIdFormaPagamento());
            modelItemPedido.setIdPedidoEstoque(controllerPedidoEstoque.getListaPedidoEstoqueController().getIdPedidoEstoque());

            listaModelItemPedido.add(modelItemPedido);
            listaModelEstoque.add(darBaixaEstoque(idFilial, idProduto, i));
        }
        //salva o produto da venda no banco
        salvarProdutoEstoque(listaModelItemPedido, listaModelEstoque);
        countIdPedidoEstoque = countIdPedidoEstoque + 1;
        //limparCamposSaida();
        jtpItemPedido.setSelectedIndex(0);
    }//GEN-LAST:event_jbFinalizarVendaActionPerformed

    private void jbCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbCancelarActionPerformed

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        /**
         * Preenche a tabela de itemPedido com os produtos do banco
         */
        int linha = this.TabelaProduto.getSelectedRow();
        int idProdutoaux = 0;
        int idEstoque = 0;
        int existeEstoque = 0;
        int quantidade = 0;

        try {
            int idProduto = (int) this.TabelaProduto.getValueAt(linha, 0);
            modelProduto = controllerProduto.retornarProdutoController(idProduto);

            modelItemPedido.setIdProduto(modelProduto.getIdProduto());
            modelItemPedido.setStatus("Ativo");
            modelItemPedido.setQuantidade(Integer.parseInt(this.tfQuantidade.getText()));
            modelItemPedido.setValorUnitario(modelProduto.getValor());
            modelItemPedido.setValorTotal(modelProduto.getValor() * Integer.parseInt(tfQuantidade.getText()));
            modelItemPedido.setIdPedidoEstoque(modelPedidoEstoque.getIdPedidoEstoque());

            preencheTabelaItemProdutos();

            int tamTabela = TabelaItemPedido.getRowCount();

            for (int i = 0; i < tamTabela; i++) {

                idEstoque = controllerEstoque.getEstoquePorProdutoController(idProduto).getIdEstoque();
                modelEstoque.setIdEstoque(idEstoque);
                quantidade = controllerEstoque.getEstoqueController(idEstoque).getQuantidade() - Integer.parseInt(TabelaItemPedido.getValueAt(i, 2).toString());

                if (modelItemPedido.getIdProduto() == idProdutoaux) {
                    limparLinhaTabelaSaida(i);
                    JOptionPane.showMessageDialog(this, "Produto já foi adicionado!", "Aviso", JOptionPane.ERROR_MESSAGE);
                }

                idProdutoaux = (int) TabelaItemPedido.getValueAt(i, 0);
            }

            if (quantidade >= 0) {
                modelEstoque.setQuantidade(quantidade);
            } else {
                limparLinhaTabelaSaida(0);
                JOptionPane.showMessageDialog(this, "Produtos insuficientes esta quantidade", "Aviso", JOptionPane.ERROR_MESSAGE);
            }

            existenciaEstoque(idProduto, linha);

        } catch (Exception e) {
            e.getMessage();
            JOptionPane.showMessageDialog(this, e, "Aviso", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jbBuscaPorDescricaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorDescricaoActionPerformed
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProduto.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProduto.setRowSorter(classificador);

        //String txtId = tfId.getText();
        //String txtCodBarras = tfCodBarras.getText();
        String txt = tfDescricao.getText();

        classificador.setRowFilter(RowFilter.regexFilter(txt, 2));
    }//GEN-LAST:event_jbBuscaPorDescricaoActionPerformed

    private void cbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbClienteActionPerformed

    private void tfCodClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCodClienteActionPerformed

    private void cbUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbUsuarioActionPerformed

    private void tfCodFilialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfCodFilialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfCodFilialActionPerformed

    private void jbPedidoSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPedidoSaidaActionPerformed
        // TODO add your handling code here:
        tipoPedido = "SAÍDA";
        if (!confirmaPreenchimentoPedidoEstoque()) {;
            //salvarPedidoEstoque();
            jtpItemPedido.setSelectedIndex(1);
            jtpItemPedido.setEnabledAt(1, true);
        } else {
            JOptionPane.showMessageDialog(this, "Preencha os campos", "AVISO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbPedidoSaidaActionPerformed

    private void jbBuscaPorDescricao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorDescricao1ActionPerformed
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProdutoEntrada.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProdutoEntrada.setRowSorter(classificador);

        String txt = tfDescricaoEntrada.getText();
        classificador.setRowFilter(RowFilter.regexFilter(txt, 2));
    }//GEN-LAST:event_jbBuscaPorDescricao1ActionPerformed

    private void jbRemoverEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverEntradaActionPerformed
        // TODO add your handling code here:
        limparCamposEntrada();
        modelItemPedido.setStatus("Cancelado");
    }//GEN-LAST:event_jbRemoverEntradaActionPerformed

    private void jbBuscaPorCodBarraEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorCodBarraEntradaActionPerformed
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProdutoEntrada.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProdutoEntrada.setRowSorter(classificador);

        String txt = tfCodBarrasProdEntrada.getText();
        classificador.setRowFilter(RowFilter.regexFilter(txt, 1));
    }//GEN-LAST:event_jbBuscaPorCodBarraEntradaActionPerformed

    private void jbFinalizarCompraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinalizarCompraActionPerformed

        salvarPedidoEstoque();
        int idProduto = 0;
        int idEstoque = 0;
        int idFilial = 0;

        listaModelItemPedido = new ArrayList<>();

        int tamTabela = TabelaItemPedidoEntrada.getRowCount();
        for (int i = 0; i < tamTabela; i++) {

            idProduto = (int) TabelaItemPedidoEntrada.getValueAt(i, 0);
            idFilial = Integer.parseInt(tfCodFilial.getText());
            modelItemPedido = new ModelItemPedido();
            modelEstoque = new ModelEstoque();
            modelItemPedido.setIdProduto(idProduto);
            modelItemPedido.setStatus("Processado");
            modelItemPedido.setQuantidade((int) TabelaItemPedidoEntrada.getValueAt(i, 2));
            modelItemPedido.setValorUnitario((double) TabelaItemPedidoEntrada.getValueAt(i, 3));
            modelItemPedido.setValorTotal((double) TabelaItemPedidoEntrada.getValueAt(i, 4));
            modelItemPedido.setIdFormaPagamento(controllerFormaPagamento.getFormaPagamentoPorTipoController((cbFormaPagamento.getSelectedItem().toString())).getIdFormaPagamento());
            modelItemPedido.setIdPedidoEstoque(controllerPedidoEstoque.getListaPedidoEstoqueController().getIdPedidoEstoque());

            listaModelItemPedido.add(modelItemPedido);
            listaModelEstoque.add(darEntradaEstoque(idFilial, idProduto, i));
        }
        //salva o produto da venda no banco
        salvarProdutoEstoque(listaModelItemPedido, listaModelEstoque);
        countIdPedidoEstoque = countIdPedidoEstoque + 1;
        //limparCamposSaida();
        jtpItemPedido.setSelectedIndex(0);
    }//GEN-LAST:event_jbFinalizarCompraActionPerformed

    private void jbCancelarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelarEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbCancelarEntradaActionPerformed

    private void jbBuscaPorIdEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscaPorIdEntradaActionPerformed
        // Busca um produto no banco
        DefaultTableModel modelo = (DefaultTableModel) this.TabelaProdutoEntrada.getModel();
        final TableRowSorter<TableModel> classificador = new TableRowSorter<>(modelo);
        this.TabelaProdutoEntrada.setRowSorter(classificador);

        String txt = tfCodProdutoEntrada.getText();
        classificador.setRowFilter(RowFilter.regexFilter(txt, 0));
    }//GEN-LAST:event_jbBuscaPorIdEntradaActionPerformed

    private void jbAdicionarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarEntradaActionPerformed
        /**
         * Preenche a tabela de itemPedido com os produtos do banco
         */
        int linha = this.TabelaProdutoEntrada.getSelectedRow();
        int idProdutoaux = 0;
        int idEstoque = 0;
        int quantidade = 0;

        try {
            int idProduto = (int) this.TabelaProdutoEntrada.getValueAt(linha, 0);
            modelProduto = controllerProduto.retornarProdutoController(idProduto);

            modelItemPedido.setIdProduto(modelProduto.getIdProduto());
            modelItemPedido.setStatus("Ativo");
            modelItemPedido.setQuantidade(Integer.parseInt(this.tfQuantidadeEntrada.getText()));
            modelItemPedido.setValorUnitario(modelProduto.getValor());
            modelItemPedido.setValorTotal(modelProduto.getValor() * Integer.parseInt(tfQuantidadeEntrada.getText()));
            modelItemPedido.setIdPedidoEstoque(modelPedidoEstoque.getIdPedidoEstoque());

            preencheTabelaItemProdutosEntrada();

            int tamTabela = TabelaItemPedidoEntrada.getRowCount();

            for (int i = 0; i < tamTabela; i++) {

                idEstoque = controllerEstoque.getEstoquePorProdutoController(idProduto).getIdEstoque();
                modelEstoque.setIdEstoque(idEstoque);
                quantidade = controllerEstoque.getEstoqueController(idEstoque).getQuantidade() + Integer.parseInt(TabelaItemPedidoEntrada.getValueAt(i, 2).toString());

                if (modelItemPedido.getIdProduto() == idProdutoaux) {
                    limparLinhaTabelaEntrada(i);
                    JOptionPane.showMessageDialog(this, "Produto já foi adicionado!", "Aviso", JOptionPane.ERROR_MESSAGE);
                }

                idProdutoaux = (int) TabelaItemPedidoEntrada.getValueAt(i, 0);
            }

            if (quantidade >= 0) {
                modelEstoque.setQuantidade(quantidade);
            } else {
                limparLinhaTabelaEntrada(0);
                JOptionPane.showMessageDialog(this, "Produtos insuficientes esta quantidade", "Aviso", JOptionPane.ERROR_MESSAGE);
            }

            existenciaEstoqueEntrada(idProduto, linha);

        } catch (Exception e) {
            e.getMessage();
            JOptionPane.showMessageDialog(this, e, "Aviso", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAdicionarEntradaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        tipoPedido = "ENTRADA";
        if (!confirmaPreenchimentoPedidoEstoque()) {
            jtpItemPedido.setSelectedIndex(2);
            jtpItemPedido.setEnabledAt(2, true);
            //salvarPedidoEstoque();
        } else {
            JOptionPane.showMessageDialog(this, "Preencha os campos", "AVISO", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbFormaPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFormaPagamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbFormaPagamentoActionPerformed

    private void cbUsuarioPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbUsuarioPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cbUsuario.isPopupVisible()) {
            modelUsuario = controllerUsuario.getUsuarioController(cbUsuario.getSelectedItem().toString());
            tfCodUsuario.setText(String.valueOf(modelUsuario.getIdUsuario()));
        }
    }//GEN-LAST:event_cbUsuarioPopupMenuWillBecomeInvisible

    private void cbClientePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbClientePopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cbCliente.isPopupVisible()) {
            modelCliente = controllerCliente.retornarClienteController(cbCliente.getSelectedItem().toString());
            tfCodCliente.setText(String.valueOf(modelCliente.getIdCliente()));
        }
    }//GEN-LAST:event_cbClientePopupMenuWillBecomeInvisible

    private void cbFilialPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_cbFilialPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (cbFilial.isPopupVisible()) {
            modelFilial = controllerFilial.getFilialController(cbFilial.getSelectedItem().toString());
            tfCodFilial.setText(String.valueOf(modelFilial.getIdFilial()));
        }
    }//GEN-LAST:event_cbFilialPopupMenuWillBecomeInvisible

    private void tfTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfTotalActionPerformed

    private void jtpItemPedidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtpItemPedidoMouseClicked
        // TODO add your handling code here:
        preencheTabelaSaida();
        tfTotal.setText(Double.toString(controllerItemPedido.retornaTotalDAO("SAIDA")));
        preencheTabelaEntrada();
        tfTotalEntrada.setText(Double.toString(controllerItemPedido.retornaTotalDAO("ENTRADA")));
    }//GEN-LAST:event_jtpItemPedidoMouseClicked

    private void tfTotalEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTotalEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfTotalEntradaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPedidoEstoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPedidoEstoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPedidoEstoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPedidoEstoque.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPedidoEstoque().setVisible(true);
            }
        });
    }

    private boolean salvarPedidoEstoque() {
        // Salva um novo pedido de estoque no banco
        modelPedidoEstoque.setTipo(tipoPedido);
        modelPedidoEstoque.setIdUsuario(Integer.parseInt(tfCodUsuario.getText()));
        modelPedidoEstoque.setIdCliente(Integer.parseInt(tfCodCliente.getText()));
        modelPedidoEstoque.setIdFilial(Integer.parseInt(tfCodFilial.getText()));
        modelPedidoEstoque.setObservacao(tfObservacao.getText());

        if (controllerPedidoEstoque.salvarPedidoEstoqueController(modelPedidoEstoque) > 0) {

            JOptionPane.showMessageDialog(this, "Pedido criado com sucesso!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            //this.preencherTabelaPedidoEstoque();
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao criar pedido!", "ERRO", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private boolean confirmaPreenchimentoPedidoEstoque() {
        return "".equals(tfCodCliente.getText()) && "".equals(tfCodFilial.getText()) && "".equals(tfCodUsuario.getText());
    }

    /**
     * Preenche o comboBox com todas as filiais do banco
     */
    private void preencherComboBoxFilial() {
        listaModelFilial = controllerFilial.getListaFilialController();
        cbFilial.removeAllItems();
        for (int i = 0; i < listaModelFilial.size(); i++) {
            cbFilial.addItem(listaModelFilial.get(i).getNome());
        }
    }

    /**
     * Preenche o comboBox com todas os usuários do banco
     */
    private void preencherComboBoxUsuario() {
        listaModelUsuario = controllerUsuario.getListaUsuarioController();
        cbUsuario.removeAllItems();
        for (int i = 0; i < listaModelUsuario.size(); i++) {
            cbUsuario.addItem(listaModelUsuario.get(i).getNome());
        }
    }

    /**
     * Preenche o comboBox com todas os usuários do banco
     */
    private void preencherComboBoxCliente() {
        listaModelCliente = controllerCliente.retornarListaClienteController();
        cbCliente.removeAllItems();
        for (int i = 0; i < listaModelCliente.size(); i++) {
            cbCliente.addItem(listaModelCliente.get(i).getNome());
        }
    }

    /**
     * // salva o pedido no banco
     *
     * @return modelPedidoEstoque
     */
    public ModelPedidoEstoque salvaPedidoEstoque() {
        modelPedidoEstoque.setTipo("SAÍDA");
        modelPedidoEstoque.setIdUsuario(Integer.parseInt(tfCodUsuario.getText()));
        modelPedidoEstoque.setIdCliente(Integer.parseInt(tfCodCliente.getText()));
        modelPedidoEstoque.setIdFilial(Integer.parseInt(tfCodFilial.getText()));
        modelPedidoEstoque.setObservacao(tfObservacao.getText());

        return modelPedidoEstoque;
    }

    private void limparLinhaTabelaSaida(int linha) {
        //int linha = this.TabelaItemPedido.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedido.getModel();

        modelo.removeRow(linha);

    }

    private void limparLinhaTabelaEntrada(int linha) {
        //int linha = this.TabelaItemPedido.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedidoEntrada.getModel();

        modelo.removeRow(linha);

    }

    /**
     * Preenche a tabela de produtos com os produtos do banco
     */
    private void preencheTabelaProdutosSaida() {
        listaModelProduto = controllerProduto.retornarListaProdutoController();
        DefaultTableModel modelo = (DefaultTableModel) TabelaProduto.getModel();
        modelo.setNumRows(0);

        //inserir produtos na tabela
        int count = listaModelProduto.size();
        for (int i = 0; i < count; i++) {
            modelo.addRow(new Object[]{
                listaModelProduto.get(i).getIdProduto(),
                listaModelProduto.get(i).getCodBarras(),
                listaModelProduto.get(i).getDescricao(),
                listaModelProduto.get(i).getValor()
            });
        }
    }

    /**
     * Preenche a tabela de produtos com os produtos do banco
     */
    private void preencheTabelaProdutosEtrada() {
        listaModelProduto = controllerProduto.retornarListaProdutoController();
        DefaultTableModel modelo = (DefaultTableModel) TabelaProdutoEntrada.getModel();
        modelo.setNumRows(0);

        //inserir produtos na tabela
        int count = listaModelProduto.size();
        for (int i = 0; i < count; i++) {
            modelo.addRow(new Object[]{
                listaModelProduto.get(i).getIdProduto(),
                listaModelProduto.get(i).getCodBarras(),
                listaModelProduto.get(i).getDescricao(),
                listaModelProduto.get(i).getValor()
            });
        }
    }

    /**
     * Preenche a tabela
     */
    private void preencheTabelaSaida() {
        listaModelItemPedido = controllerItemPedido.retornaListaItemPedidosPorTipoDAO("SAIDA");
        DefaultTableModel modelo = (DefaultTableModel) TabelaSaida.getModel();
        modelo.setNumRows(0);

        //inserir produtos na tabela
        int count = listaModelItemPedido.size();
        for (int i = 0; i < count; i++) {
            modelo.addRow(new Object[]{
                listaModelItemPedido.get(i).getIdProduto(),
                listaModelItemPedido.get(i).getValorUnitario(),
                listaModelItemPedido.get(i).getIdFormaPagamento(),
                listaModelItemPedido.get(i).getValorTotal()
            });
        }
    }

    /**
     * Preenche a tabela de produtos com os produtos do banco
     */
    private void preencheTabelaEntrada() {
        listaModelItemPedido = controllerItemPedido.retornaListaItemPedidosPorTipoDAO("ENTRADA");
        DefaultTableModel modelo = (DefaultTableModel) TabelaEntrada.getModel();
        modelo.setNumRows(0);

        //inserir produtos na tabela
        int count = listaModelItemPedido.size();
        for (int i = 0; i < count; i++) {
            modelo.addRow(new Object[]{
                listaModelItemPedido.get(i).getIdProduto(),
                listaModelItemPedido.get(i).getValorUnitario(),
                listaModelItemPedido.get(i).getIdFormaPagamento(),
                listaModelItemPedido.get(i).getValorTotal()
            });
        }
    }

    private void preencheTabelaItemProdutos() {
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedido.getModel();
        int count = 0;
        for (int i = 0; i < count; i++) {
            modelo.setNumRows(0);
        }

        modelo.addRow(new Object[]{
            modelItemPedido.getIdProduto(),
            modelItemPedido.getStatus(),
            modelItemPedido.getQuantidade(),
            modelItemPedido.getValorUnitario(),
            modelItemPedido.getValorTotal()
        });
    }

    private void preencheTabelaItemProdutosEntrada() {
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedidoEntrada.getModel();
        int count = 0;
        for (int i = 0; i < count; i++) {
            modelo.setNumRows(0);
        }

        modelo.addRow(new Object[]{
            modelItemPedido.getIdProduto(),
            modelItemPedido.getStatus(),
            modelItemPedido.getQuantidade(),
            modelItemPedido.getValorUnitario(),
            modelItemPedido.getValorTotal()
        });
    }

    private void limparCamposSaida() {
        int linha = this.TabelaItemPedido.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedido.getModel();

        modelo.removeRow(linha);

    }

    private void limparCamposEntrada() {
        int linha = this.TabelaItemPedidoEntrada.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) TabelaItemPedidoEntrada.getModel();

        modelo.removeRow(linha);

    }

    /**
     * Preenche o comboBox com as formas de pagamento do banco
     */
    private void preencherComboBoxFormaPagamento() {
        listaModelFormaPagamento = controllerFormaPagamento.getListaFormaPagamentoController();
        cbFormaPagamento.removeAllItems();
        for (int i = 0; i < listaModelFormaPagamento.size(); i++) {
            cbFormaPagamento.addItem(listaModelFormaPagamento.get(i).getTipoPagamento());
        }
    }

    /**
     * Preenche o comboBox com as formas de pagamento do banco
     */
    private void preencherComboBoxFormaPagamentoEntrada() {
        listaModelFormaPagamento = controllerFormaPagamento.getListaFormaPagamentoController();
        cbFormaPagamentoEntrada.removeAllItems();
        for (int i = 0; i < listaModelFormaPagamento.size(); i++) {
            cbFormaPagamentoEntrada.addItem(listaModelFormaPagamento.get(i).getTipoPagamento());
        }
    }

    private void salvarProdutoEstoque(ArrayList<ModelItemPedido> listaModelItemPedido, ArrayList<ModelEstoque> listaModelEstoque) {
        //Salva os produtos da venda
        if (controllerItemPedido.salvarItemPedidoController(listaModelItemPedido)) {
            controllerEstoque.atualizarDadoEstoqueController(listaModelEstoque);
            JOptionPane.showMessageDialog(this, "Item de pedido adicionado!", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao inserir produto ao pedido!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private ModelEstoque darBaixaEstoque(int idFilial, int idProduto, int i) {
        int quantidade = 0;
        int idEstoque = 0;
        idEstoque = controllerEstoque.getEstoquePorFilialProdutoController(idFilial, idProduto).getIdEstoque();
        modelEstoque.setIdEstoque(idEstoque);
        quantidade = controllerEstoque.getEstoqueController(idEstoque).getQuantidade() - Integer.parseInt(TabelaItemPedido.getValueAt(i, 2).toString());
        modelEstoque.setQuantidade(quantidade);

        return modelEstoque;
    }

    private ModelEstoque darEntradaEstoque(int idFilial, int idProduto, int i) {
        int quantidade = 0;
        int idEstoque = 0;
        idEstoque = controllerEstoque.getEstoquePorFilialProdutoController(idFilial, idProduto).getIdEstoque();
        modelEstoque.setIdEstoque(idEstoque);
        quantidade = controllerEstoque.getEstoqueController(idEstoque).getQuantidade() + Integer.parseInt(TabelaItemPedidoEntrada.getValueAt(i, 2).toString());
        modelEstoque.setQuantidade(quantidade);

        return modelEstoque;
    }

    private void existenciaEstoque(int idProduto, int linha) {
        int existeEstoque = 0;
        existeEstoque = controllerEstoque.getEstoquePorFilialProdutoController(Integer.parseInt(tfCodFilial.getText()), idProduto).getIdEstoque();
        //testa se estoque existe para uma filial
        if (existeEstoque == 0) {
            JOptionPane.showMessageDialog(this, "Não existe estoque deste produto para esta filial", "Aviso", JOptionPane.ERROR_MESSAGE);
            limparLinhaTabelaSaida(linha);
        }
    }

    private void existenciaEstoqueEntrada(int idProduto, int linha) {
        int existeEstoque = 0;
        existeEstoque = controllerEstoque.getEstoquePorFilialProdutoController(Integer.parseInt(tfCodFilial.getText()), idProduto).getIdEstoque();
        //testa se estoque existe para uma filial
        if (existeEstoque == 0) {
            JOptionPane.showMessageDialog(this, "Não existe estoque deste produto para esta filial", "Aviso", JOptionPane.ERROR_MESSAGE);
            limparLinhaTabelaEntrada(linha);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TabelaEntrada;
    private javax.swing.JTable TabelaItemPedido;
    private javax.swing.JTable TabelaItemPedidoEntrada;
    private javax.swing.JTable TabelaProduto;
    private javax.swing.JTable TabelaProdutoEntrada;
    private javax.swing.JTable TabelaSaida;
    private javax.swing.JComboBox<String> cbCliente;
    private javax.swing.JComboBox<String> cbFilial;
    private javax.swing.JComboBox<String> cbFormaPagamento;
    private javax.swing.JComboBox<String> cbFormaPagamentoEntrada;
    private javax.swing.JComboBox<String> cbUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbAdicionarEntrada;
    private javax.swing.JButton jbBuscaPorCodBarra;
    private javax.swing.JButton jbBuscaPorCodBarraEntrada;
    private javax.swing.JButton jbBuscaPorDescricao;
    private javax.swing.JButton jbBuscaPorDescricao1;
    private javax.swing.JButton jbBuscaPorId;
    private javax.swing.JButton jbBuscaPorIdEntrada;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbCancelarEntrada;
    private javax.swing.JButton jbFinalizarCompra;
    private javax.swing.JButton jbFinalizarVenda;
    private javax.swing.JButton jbPedidoSaida;
    private javax.swing.JButton jbRemover;
    private javax.swing.JButton jbRemoverEntrada;
    private javax.swing.JTabbedPane jtpItemPedido;
    private javax.swing.JTextField tfCodBarrasProd;
    private javax.swing.JTextField tfCodBarrasProdEntrada;
    private javax.swing.JTextField tfCodCliente;
    private javax.swing.JTextField tfCodFilial;
    private javax.swing.JTextField tfCodProduto;
    private javax.swing.JTextField tfCodProdutoEntrada;
    private javax.swing.JTextField tfCodUsuario;
    private javax.swing.JTextField tfDescricao;
    private javax.swing.JTextField tfDescricaoEntrada;
    private javax.swing.JTextField tfObservacao;
    private javax.swing.JTextField tfQuantidade;
    private javax.swing.JTextField tfQuantidadeEntrada;
    private javax.swing.JTextField tfTotal;
    private javax.swing.JTextField tfTotalEntrada;
    // End of variables declaration//GEN-END:variables
}
